---
title: "AE 20: Trends instructional staff employees in universities"
categories: 
  - Application exercise
  - Answers
jupyter: python3
execute: 
  warning: false
  error: false
---

The American Association of University Professors (AAUP) is a nonprofit membership association of faculty and other academic professionals.
[This report](https://www.aaup.org/sites/default/files/files/AAUP_Report_InstrStaff-75-11_apr2013.pdf) by the AAUP shows trends in instructional staff employees between 1975 and 2011, and contains the following image.
What trends are apparent in this visualization?

![](https://sta199-s24.github.io/images/staff-employment.png){fig-align="center"}

## Packages

```{python}
#| label: packages
#| message: false

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
```

## Data

Each row in this dataset represents a faculty type, and the columns are the years for which we have data.
The values are percentage of hires of that type of faculty for each year.

```{python}
#| label: load-data-staff
#| message: false

staff = pd.read_csv("data/instructional-staff.csv")
staff
```

## Recreate

-   **Your turn (10 minutes):** Recreate the visualization above. Try to match as many of the elements as possible. Hint: You might need to reshape your data first.

```{python}
staff_long = staff.melt(id_vars=['faculty_type'], var_name='year', value_name='percentage')
staff_long['percentage'] = pd.to_numeric(staff_long['percentage'])
staff_long['year'] = pd.to_numeric(staff_long['year'])

faculty_order = [
    "Full-Time Tenured Faculty",
    "Full-Time Tenure-Track Faculty",
    "Full-Time Non-Tenure-Track Faculty",
    "Part-Time Faculty",
    "Graduate Student Employees"
]
staff_long['faculty_type'] = pd.Categorical(staff_long['faculty_type'], categories=faculty_order, ordered=True)
staff_long['year'] = staff_long['year'].astype(str)

```

```{python}
#| fig-asp: 0.5
#| fig-width: 12.0

sns.set_theme(style="whitegrid")

plt.figure(figsize=(10, 6))
sns.barplot(data=staff_long, x='faculty_type', y='percentage', hue='year', dodge=True)
plt.ylim(0, 45)
plt.xlabel('')
plt.ylabel('Percent of Total Instructional Staff')
plt.title('Trends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals')
plt.legend(title='Year', loc='upper left', bbox_to_anchor=(0.4, 0.93), ncol=5)
plt.show()
```

## Place time on x-axis

-   **Demo:** Convert the visualization to a line plot with time on the x-axis.

```{python}
#| fig-asp: 0.5
#| fig-width: 12.0
plt.figure(figsize=(10, 6))
sns.lineplot(data=staff_long, x='year', y='percentage', hue='faculty_type', marker='o')
plt.xlabel('')
plt.ylabel('Percent of Total Instructional Staff')
plt.title('Trends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals')
plt.legend(title='Faculty Type', loc='upper left', bbox_to_anchor=(1.05, 1), borderaxespad=0)
plt.show()
```

## Pay attention to variable types

-   **Question:** What is wrong with the x-axis of the plot above? How can you fix it?

Time is represented as a character string (equally spaces between levels) instead of on a continuous scale (with spacing indicating numbers of years between ticks.

-   **Your turn:** Implement the fix for the x-axis of the plot.

```{python}
#| fig-asp: 0.5
#| fig-width: 12.0
staff_long['year'] = pd.to_numeric(staff_long['year'])  # Ensure year is treated as a numeric type

plt.figure(figsize=(10, 6))
sns.lineplot(data=staff_long, x='year', y='percentage', hue='faculty_type', marker='o')
plt.xlabel('')
plt.ylabel('Percent of Total Instructional Staff')
plt.title('Trends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals')
plt.legend(title='Faculty Type', loc='upper left', bbox_to_anchor=(1.05, 1), borderaxespad=0)
plt.show()
```

## Use an accessible color scale

**Question:** What do we mean by an accessible color scale?
What types of color vision deficiencies are there?

-   **Demo:** What does the plot look like to people with various color vision deficiencies?

-   **Demo:** Remake the plot with an accessible color scale.

```{python}
#| fig-asp: 0.5
#| fig-width: 12.0
plt.figure(figsize=(10, 6))
sns.lineplot(data=staff_long, x='year', y='percentage', hue='faculty_type', marker='o', palette='colorblind')
plt.xlabel('')
plt.ylabel('Percent of Total Instructional Staff')
plt.title('Trends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals')
plt.legend(title='Faculty Type', loc='upper left', bbox_to_anchor=(1.05, 1), borderaxespad=0)
plt.show()
```

## Use direct labeling

-   **Demo:** Remove the legend and add labels for each line at the end of the line (where `x` is the `max(x)` recorded).

```{python}
#| fig-asp: 0.5
#| fig-width: 12.0

palette = sns.color_palette("colorblind", len(faculty_order))
palette_dict = dict(zip(faculty_order, palette))

plt.figure(figsize=(10, 6))
sns.lineplot(data=staff_long, x='year', y='percentage', hue='faculty_type', marker='o', palette=palette, legend=False)

for faculty in staff_long['faculty_type'].unique():
    latest_year = staff_long[staff_long['faculty_type'] == faculty]['year'].max()
    latest_value = staff_long[(staff_long['faculty_type'] == faculty) & (staff_long['year'] == latest_year)]['percentage'].values[0]
    plt.text(latest_year + 1, latest_value, faculty, horizontalalignment='left', size='medium', color=palette_dict[faculty], weight='semibold')

plt.xlabel('')
plt.ylabel('Percent of Total Instructional Staff')
plt.title('Trends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals')
plt.show()
```

## Use color to draw attention

-   **Demo:** Redo the line plot where Part-time Faculty is red and the rest are gray.

```{python}
staff_long['faculty_type_color'] = staff_long['faculty_type'].apply(lambda x: '#b22222' if x == 'Part-Time Faculty' else '#808080')

```

```{python}
#| fig-asp: 0.5
#| fig-width: 12.0
plt.figure(figsize=(10, 6))
sns.lineplot(data=staff_long, x='year', y='percentage', hue='faculty_type_color', marker='o', ci=False, legend=False, palette=['#808080', '#b22222'])
for faculty in staff_long['faculty_type'].unique():
    latest_year = staff_long[staff_long['faculty_type'] == faculty]['year'].max()
    latest_value = staff_long[(staff_long['faculty_type'] == faculty) & (staff_long['year'] == latest_year)]['percentage'].values[0]
    plt.text(latest_year + 1, latest_value, faculty, horizontalalignment='left', size='medium', color='black' if faculty != 'Part-Time Faculty' else '#b22222', weight='semibold')
plt.xlabel('')
plt.ylabel('Percent of Total Instructional Staff')
plt.title('Trends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals')
plt.show()
```

## Pick a purpose + use labels to communicate the message


```{python}
#| fig-asp: 0.5
#| fig-width: 12.0
plt.figure(figsize=(10, 6))
sns.lineplot(data=staff_long, x='year', y='percentage', hue='faculty_type_color', palette=['#808080', '#b22222'], legend=False)
plt.xlabel('')
plt.ylabel('Percent of Total Instructional Staff')
plt.title('Trends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals')
plt.annotate('Part-Time\nFaculty', xy=(2011, 41), xytext=(2012, 41), color='#b22222', size=12, ha='left')
plt.annotate('Other\nFaculty', xy=(2011, 13.5), xytext=(2012, 13.5), color='#808080', size=12, ha='left')
plt.plot([2011.5, 2011.5], [7, 20], color='#808080', linestyle='dotted')
plt.ylim(0, 45)
plt.show()
```

## Simplify

```{python}
#| fig-asp: 0.5
#| fig-width: 12.0
plt.figure(figsize=(10, 6))
sns.lineplot(data=staff_long, x='year', y='percentage', hue='faculty_type_color', palette=['#808080', '#b22222'], legend=False, ci=False)
plt.xlabel('')
plt.ylabel('Percent of Total Instructional Staff')
plt.title('Instruction by part-time faculty on a steady increase\nTrends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals')
plt.annotate('Part-Time\nFaculty', xy=(2011, 41), xytext=(2012, 41), color='#b22222', size=12, ha='left')
plt.annotate('Other\nFaculty', xy=(2011, 13.5), xytext=(2012, 13.5), color='#808080', size=12, ha='left')
plt.plot([2011.5, 2011.5], [7, 20], color='#808080', linestyle='dotted')
plt.ylim(0, 45)
plt.grid(False)
plt.show()
```

## Summary

-   Represent percentages as parts of a whole
-   Place variables representing time on the x-axis when possible
-   Pay attention to data types, e.g., represent time as time on a continuous scale, not years as levels of a categorical variable
-   Prefer direct labeling over legends
-   Use accessible colors
-   Use color to draw attention
-   Pick a purpose and label, color, annotate for that purpose
-   Communicate your main message directly in the plot labels
-   Simplify before you call it done (a.k.a. "Before you leave the house, look in the mirror and take one thing off")