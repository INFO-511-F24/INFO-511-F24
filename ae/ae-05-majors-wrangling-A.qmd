---
title: "AE 05: Wrangling College Majors"
subtitle: "Suggested answers"
categories: 
  - Application exercise
  - Answers
jupyter: python3
execute:
  warning: false
  error: false
---

::: callout-important
These are suggested answers.
This document should be used as reference only, it's not designed to be an exhaustive key.
:::

## Goal

Our ultimate goal in this application exercise is to make the following data visualization.

```{python}
#| echo: false

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

sns.set_style("whitegrid")

degrees = pd.read_csv("data/degrees.csv")

data = degrees.melt(id_vars='field', var_name='year', value_name='n')

data['year'] = pd.to_datetime(data['year'], format='%Y')

# Filter data for any three different fields and years 2005-2015
selected_fields = data[(data['field'].isin(['Business', 'Engineering', 'Computer and information sciences', 'Psychology'])) & 
                            (data['year'].dt.year >= 2005) & 
                            (data['year'].dt.year <= 2015)]

# Plotting
custom_palette = {
    "Business": "#53868B",
    "Engineering": "#7AC5CD",
    "Computer and information sciences": "#8B814C",
    "Psychology": "#CDBE70"
}

plt.figure(figsize=(8, 6))
sns.lineplot(data=selected_fields, x='year', y='n', hue='field', marker='o', palette=custom_palette)
plt.title('Selected Majors over the years\nAcademic years 2005 - 2015')
plt.xlabel('Graduation year')
plt.ylabel('Number of majors graduating')
plt.legend(title='Degree type')
plt.grid(True)
plt.show()

```

## Data

For this exercise you will work with data on the proportions of Bachelor’s degrees awarded in the US between 2005 and 2015.
The dataset you will use is in your `data/` folder and it’s called `degrees.csv`.

```{python}
#| label: load-packages-data
#| message: false
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter
import seaborn as sns

degrees = pd.read_csv("data/degrees.csv")
```

And let's take a look at the data.

```{python}
degrees.head()
```

## Pivoting

-   **Demo:** Pivot the `degrees` data frame *longer* such that each row represents a degree type / year combination and `year` and `n`umber of graduates for that year are columns in the data frame.

```{python}
degree = degrees.melt(id_vars='field', var_name='year', value_name='n')

degree.info()
```

-   **Question:** What is the type of the `year` variable? Why? What should it be?

It's an `object` variable since the information came from the columns of the original data frame and R cannot know that these character strings represent years.
The variable type should be numeric.

-   **Demo:** Start over with pivoting, and this time also make sure `year` is a numerical variable in the resulting data frame.

```{python}
degree = degrees.melt(id_vars='field', var_name='year', value_name='n')
degree['year'] = pd.to_datetime(degree['year'], format='%Y')

degree.info()
```

-   **Question:** What does an `NaN` mean in this context? *Hint:* The data come from the university registrar, and they have records on every single graduates, there shouldn't be anything "unknown" to them about who graduated when.

`NA`s should actually be 0s.

-   **Demo:** Add on to your pipeline that you started with pivoting and convert `NaN`s in `n` to `0`s.

```{python}
degree = degrees.melt(id_vars='field', var_name='year', value_name='n')
degree['year'] = pd.to_datetime(degree['year'], format='%Y')
degree.fillna(0, inplace=True)

degree.isna().sum()
```

-   **Demo:** In our plot the degree types are Business, Computer and information sciences, Engineering, and Psychology. This information is in our dataset, in the `degree` column, but this column also has additional characters we don't need. Filter the dataframe with levels Business, Computer and information sciences, Engineering, and Psychology based on `degree`. Do this by adding on to your pipeline from earlier.

```{python}
degree = degrees.melt(id_vars='field', var_name='year', value_name='n')
degree['year'] = pd.to_datetime(degree['year'], format='%Y')
degree.fillna(0, inplace=True)

selected_fields = degree[(degree['field'].isin(['Business', 'Engineering', 'Computer and information sciences', 'Psychology']))]

degree.head()
```

-   **Demo:** This does will produce data from 1971 to 2015. Add to the filter with an `&` operator to additionally filter only data from 2005 to 2015.

```{python}
degree = degrees.melt(id_vars='field', var_name='year', value_name='n')
degree['year'] = pd.to_datetime(degree['year'], format='%Y')
degree.fillna(0, inplace=True)

selected_fields = degree[(degree['field'].isin(['Business', 'Engineering', 'Computer and information sciences', 'Psychology'])) & 
                            (degree['year'].dt.year >= 2005) & 
                            (degree['year'].dt.year <= 2015)]
```

-   **Your turn (5 minutes):** Now we start making our plot, but let's not get too fancy right away. Create the following plot, which will serve as the "first draft" on the way to our [Goal]. Do this by adding on to your pipeline from earlier.

```{python}
sns.set_style("darkgrid")

plt.figure(figsize=(8, 6))
sns.lineplot(data=selected_fields, x='year', y='n', hue='field', marker='o')
plt.legend()
plt.show()
```

-   **Your turn (4 minutes):** What aspects of the plot need to be updated to go from the draft you created above to the [Goal] plot at the beginning of this application exercise.
    -   line colors

    -   axis labels: title, x, y

    -   theme

<!-- -->

-   **Demo:** Update line colors using the following level / color assignments. Once again, do this by adding on to your pipeline from earlier.
    -   Business: "#53868B"

    -   Engineering: "#7AC5CD"

    -   Computer and information sciences: "#8B814C"

    -   Psychology: "#CDBE70"

```{python}
custom_palette = {
    "Business": "#53868B",
    "Engineering": "#7AC5CD",
    "Computer and information sciences": "#8B814C",
    "Psychology": "#CDBE70"
}

plt.figure(figsize=(8, 6))
sns.lineplot(data=selected_fields, x='year', y='n', hue='field', marker='o', palette=custom_palette)
plt.show()
```

-   **Your turn:** Update the plot labels (`title`, `x`, and `y`) and use `sns.set_style("white_grid")`. Once again, do this by adding on to your pipeline from earlier.

```{python}
sns.set_style("whitegrid")

custom_palette = {
    "Business": "#53868B",
    "Engineering": "#7AC5CD",
    "Computer and information sciences": "#8B814C",
    "Psychology": "#CDBE70"
}

plt.figure(figsize=(8, 6))
sns.lineplot(data=selected_fields, x='year', y='n', hue='field', marker='o', palette=custom_palette)
plt.title('Selected Majors over the years\nAcademic years 2005 - 2015')
plt.xlabel('Graduation year')
plt.ylabel('Number of majors graduating')
plt.legend(title='Degree type')
plt.grid(True)
plt.show()
```
