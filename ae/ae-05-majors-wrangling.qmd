---
title: "AE 05: Wrangling College Majors"
jupyter: python3
execute:
  warning: false
  error: false
---

## Goal

Our ultimate goal in this application exercise is to make the following data visualization.

```{python}
#| echo: false

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

sns.set_style("whitegrid")

degrees = pd.read_csv("data/degrees.csv")

data = degrees.melt(id_vars='field', var_name='year', value_name='n')

# Filter data for any three different fields and years 2005-2015
data['year'] = pd.to_datetime(data['year'], format='%Y')
selected_fields = data[(data['field'].isin(['Business', 'Engineering', 'Computer and information sciences', 'Psychology'])) & 
                            (data['year'].dt.year >= 2005) & 
                            (data['year'].dt.year <= 2015)]

# Plotting
custom_palette = {
    "Business": "#53868B",
    "Engineering": "#7AC5CD",
    "Computer and information sciences": "#8B814C",
    "Psychology": "#CDBE70"
}

plt.figure(figsize=(8, 6))
sns.lineplot(data=selected_fields, x='year', y='n', hue='field', marker='o', palette=custom_palette)
plt.title('Selected Majors over the years\nAcademic years 2005 - 2015')
plt.xlabel('Graduation year')
plt.ylabel('Number of majors graduating')
plt.legend(title='Degree type')
plt.grid(True)
plt.show()

```

## Data

For this exercise you will work with data on the proportions of Bachelorâ€™s degrees awarded in the US between 2005 and 2015.
The dataset you will use is in your `data/` folder and itâ€™s called `degrees.csv`.

```{python}
#| label: load-packages-data
#| message: false
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter
import seaborn as sns

degrees = pd.read_csv("data/degrees.csv")

```

And let's take a look at the data.

```{python}
degrees.head()
```

## Pivoting

-   **Demo:** Pivot the `degrees` data frame *longer* such that each row represents a degree type / year combination and `year` and `n`umber of graduates for that year are columns in the data frame.

```{python}
#| label: pivot

# add your code here
```

-   **Question:** What is the type of the `year` variable? Why? What should it be?

*Add your response here.*

-   **Demo:** Start over with pivoting, and this time also make sure `year` is a Datetime variable in the resulting data frame.

```{python}
#| label: pivot-with-transform
# add your code here
```

-   **Question:** What would an `NA` mean in this context? *Hint:* The data come from the university registrars, and they have records on every single graduates, there shouldn't be anything "unknown" to them about who graduated when.

*Add your response here.*

-   **Demo:** Add on to your pipeline that you started with pivoting and convert `NA`s in `n` to `0`s.

```{r}
#| label: convert-na

# add your code here
```

-   **Demo:** In our plot the degree types are Business, Computer and information sciences, Engineering, and Psychology. This information is in our dataset, in the `degree` column, but this column also has additional characters we don't need. Filter the dataframe with levels Business, Computer and information sciences, Engineering, and Psychology based on `degree`. Do this by adding on to your pipeline from earlier.

```{r}
#| label: degree-type

# add your code here
```

-   **Your turn:** Now we start making our plot, but let's not get too fancy right away. Create the following plot, which will serve as the "first draft" on the way to our [Goal]. Do this by adding on to your pipeline from earlier.

```{python}
#| echo: false
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

sns.set_style("darkgrid")

degrees = pd.read_csv("data/degrees.csv")
data = degrees.melt(id_vars='field', var_name='year', value_name='n')

# Filter data for any three different fields and years 2005-2015
data['year'] = pd.to_datetime(data['year'], format='%Y')
selected_fields = data[(data['field'].isin(['Business', 'Engineering', 'Computer and information sciences', 'Psychology'])) & 
                            (data['year'].dt.year >= 2005) & 
                            (data['year'].dt.year <= 2015)]

# Plotting
custom_palette = {
    "Business": "#53868B",
    "Engineering": "#7AC5CD",
    "Computer and information sciences": "#8B814C",
    "Psychology": "#CDBE70"
}

plt.figure(figsize=(8, 6))
sns.lineplot(data=selected_fields, x='year', y='n', hue='field', marker='o')
plt.legend()
plt.show()
```

```{r}
#| label: plot-draft

# add your code here
```

-   **Your turn:** What aspects of the plot need to be updated to go from the draft you created above to the [Goal] plot at the beginning of this application exercise.

*Add your response here.*

-   **Demo:** Update line colors using the following level / color assignments. Once again, do this by adding on to your pipeline from earlier.
    -   Business: "#53868B"

    -   Engineering: "#7AC5CD"

    -   Computer and information sciences: "#8B814C"

    -   Psychology: "#CDBE70"

```{r}
#| label: plot-improve-1

# add your code here
```

-   **Your turn:** Update the plot labels (`title`, `x`, and `y`) and use `sns.set_style("white_grid")`. Once again, do this by adding on to your pipeline from earlier.

```{r}
#| label: plot-improve-2

# add your code here
```
