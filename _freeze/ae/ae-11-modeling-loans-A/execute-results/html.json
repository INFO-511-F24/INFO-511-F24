{
  "hash": "ca3ef69308997a3b567db0c3dc6796e0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'AE 11: Modelling loan interest rates'\nsubtitle: Suggested answers\ncategories:\n  - Application exercise\n  - Answers\neditor: visual\nfig-width: 7\nfig-asp: 0.618\nexecute:\n  warning: false\n  error: false\n---\n\nIn this application exercise we will be studying loan interest rates.\nThe dataset is one you've come across before in your reading -- the dataset about loans from the peer-to-peer lender, Lending Club, from the **openintro** R package.\nWe will use **pandas** and **scikit-learn** for data exploration and modeling, respectively.\n\n::: {#load-packages .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nimport statsmodels.api as sm\n\nloans = pd.read_csv('data/loans_full_schema.csv')\n```\n:::\n\n\nBefore we use the dataset, we'll make a few transformations to it.\n\n-   **Your turn:** Review the code below and write a summary of the data transformation pipeline.\n\n1.  **Calculate Credit Utilization**:\n\n    -   A new column `credit_util` is created by dividing the `total_credit_utilized` by the `total_credit_limit`.\n\n2.  **Transform Bankruptcy Indicator**:\n\n    -   The `public_record_bankrupt` column is converted into a binary categorical column `bankruptcy`, where `0` remains `0` and any other value is converted to `1`.\n\n3.  **Convert Verified Income to Category**:\n\n    -   The `verified_income` column is converted to a categorical data type.\n\n4.  **Format and Order Homeownership**:\n\n    -   The `homeownership` column is formatted to have title case (capitalizing the first letter of each word) and is converted to a categorical data type.\n\n    -   The `homeownership` categories are ordered as \"Rent\", \"Mortgage\", and \"Own\".\n\n5.  **Rename Column**:\n\n    -   The column `inquiries_last_12m` is renamed to `credit_checks`.\n\n6.  **Select Relevant Columns**:\n\n    -   The dataset is filtered to keep only the columns `interest_rate`, `loan_amount`, `verified_income`, `debt_to_income`, `credit_util`, `bankruptcy`, `term`, `credit_checks`, `issue_month`, and `homeownership`.\n\n::: {#data-prep .cell execution_count=2}\n``` {.python .cell-code}\nloans['credit_util'] = loans['total_credit_utilized'] / loans['total_credit_limit']\nloans['bankruptcy'] = loans['public_record_bankrupt'].apply(lambda x: 0 if x == 0 else 1).astype('category')\nloans['verified_income'] = loans['verified_income'].astype('category')\nloans['homeownership'] = loans['homeownership'].str.title().astype('category')\nloans['homeownership'] = pd.Categorical(loans['homeownership'], categories=[\"Rent\", \"Mortgage\", \"Own\"], ordered=True)\nloans = loans.rename(columns={'inquiries_last_12m': 'credit_checks'})\nloans = loans[['interest_rate', 'loan_amount', 'verified_income', 'debt_to_income', 'credit_util', 'bankruptcy', 'term', 'credit_checks', 'issue_month', 'homeownership']]\n```\n:::\n\n\nHere is a glimpse at the data:\n\n::: {#glimpse-loans .cell execution_count=3}\n``` {.python .cell-code}\nprint(loans.info())\nprint(loans.describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 10 columns):\n #   Column           Non-Null Count  Dtype   \n---  ------           --------------  -----   \n 0   interest_rate    10000 non-null  float64 \n 1   loan_amount      10000 non-null  int64   \n 2   verified_income  10000 non-null  category\n 3   debt_to_income   9976 non-null   float64 \n 4   credit_util      9998 non-null   float64 \n 5   bankruptcy       10000 non-null  category\n 6   term             10000 non-null  int64   \n 7   credit_checks    10000 non-null  int64   \n 8   issue_month      10000 non-null  object  \n 9   homeownership    10000 non-null  category\ndtypes: category(3), float64(3), int64(3), object(1)\nmemory usage: 576.7+ KB\nNone\n       interest_rate   loan_amount  debt_to_income  credit_util          term  \\\ncount   10000.000000  10000.000000     9976.000000  9998.000000  10000.000000   \nmean       12.427524  16361.922500       19.308192     0.403158     43.272000   \nstd         5.001105  10301.956759       15.004851     0.269313     11.029877   \nmin         5.310000   1000.000000        0.000000     0.000000     36.000000   \n25%         9.430000   8000.000000       11.057500     0.169029     36.000000   \n50%        11.980000  14500.000000       17.570000     0.360192     36.000000   \n75%        15.050000  24000.000000       25.002500     0.607317     60.000000   \nmax        30.940000  40000.000000      469.090000     1.835280     60.000000   \n\n       credit_checks  \ncount    10000.00000  \nmean         1.95820  \nstd          2.38013  \nmin          0.00000  \n25%          0.00000  \n50%          1.00000  \n75%          3.00000  \nmax         29.00000  \n```\n:::\n:::\n\n\n# Get to know the data\n\n-   **Your turn:** What is a typical interest rate in this dataset? What are some attributes of a typical loan and a typical borrower. Give yourself no more than 5 minutes for this exploration and share 1-2 findings.\n\n::: {#cell-explore-loans .cell execution_count=4}\n``` {.python .cell-code}\nfig, axs = plt.subplots(2, 2, figsize=(15, 10))\nsns.histplot(loans['interest_rate'], bins=30, kde=True, ax=axs[0, 0])\naxs[0, 0].set_title('Interest Rate Distribution')\n\nsns.histplot(loans['loan_amount'], bins=30, kde=True, ax=axs[0, 1])\naxs[0, 1].set_title('Loan Amount Distribution')\n\nsns.countplot(x='term', data=loans, ax=axs[1, 0])\naxs[1, 0].set_title('Term Distribution')\n\nsns.countplot(x='issue_month', data=loans, ax=axs[1, 1])\naxs[1, 1].set_title('Issue Month Distribution')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-11-modeling-loans-A_files/figure-html/explore-loans-output-1.png){#explore-loans width=1430 height=950}\n:::\n:::\n\n\n::: {#cell-explore-borrowers .cell execution_count=5}\n``` {.python .cell-code}\nfig, axs = plt.subplots(3, 2, figsize=(15, 15))\nsns.histplot(loans['credit_util'], bins=30, kde=True, ax=axs[0, 0])\naxs[0, 0].set_title('Credit Utilization Distribution')\n\nsns.countplot(x='verified_income', data=loans, ax=axs[0, 1])\naxs[0, 1].set_title('Verified Income Distribution')\n\nsns.histplot(loans['debt_to_income'], bins=30, kde=True, ax=axs[1, 0])\naxs[1, 0].set_title('Debt to Income Distribution')\n\nsns.countplot(x='bankruptcy', data=loans, ax=axs[1, 1])\naxs[1, 1].set_title('Bankruptcy Distribution')\n\nsns.countplot(x='credit_checks', data=loans, ax=axs[2, 0])\naxs[2, 0].set_title('Credit Checks Distribution')\n\nsns.countplot(x='homeownership', data=loans, ax=axs[2, 1])\naxs[2, 1].set_title('Homeownership Distribution')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-11-modeling-loans-A_files/figure-html/explore-borrowers-output-1.png){#explore-borrowers width=1430 height=1430}\n:::\n:::\n\n\n# Interest rate vs. credit utilization ratio\n\nPython does not encode categories or handle missing values for you.\nLinear regression models are incapable of handling either, so we will need to use one-hot encoding to encode categories and drop missing values.\n\n**Hint**: Python also does not convert the one-hot encoded values to numerics...\nso we must do this as well.\n\n::: {#6679b3c9 .cell execution_count=6}\n``` {.python .cell-code}\nX = loans[['credit_util', 'homeownership']]\n\nX = pd.get_dummies(X, drop_first=True)\n\nX = X.dropna()\nX = X.replace([np.inf, -np.inf], np.nan).dropna()\nX = X.astype(float)\n\ny = loans.loc[X.index, 'interest_rate']\ny = y.dropna()\n```\n:::\n\n\nThe regression model for interest rate vs. credit utilization is as follows.\n\n::: {#rate-util-fit .cell execution_count=7}\n``` {.python .cell-code}\nX = sm.add_constant(X)\nmodel = sm.OLS(y, X).fit()\nprint(model.summary2())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Results: Ordinary least squares\n=====================================================================\nModel:                OLS              Adj. R-squared:     0.068     \nDependent Variable:   interest_rate    AIC:                59859.3779\nDate:                 2024-07-28 15:34 BIC:                59888.2185\nNo. Observations:     9998             Log-Likelihood:     -29926.   \nDf Model:             3                F-statistic:        243.7     \nDf Residuals:         9994             Prob (F-statistic): 1.25e-152 \nR-squared:            0.068            Scale:              23.309    \n---------------------------------------------------------------------\n                       Coef.  Std.Err.    t    P>|t|   [0.025  0.975]\n---------------------------------------------------------------------\nconst                  9.9250   0.1401 70.8498 0.0000  9.6504 10.1996\ncredit_util            5.3356   0.2074 25.7266 0.0000  4.9291  5.7421\nhomeownership_Mortgage 0.6956   0.1208  5.7590 0.0000  0.4588  0.9323\nhomeownership_Own      0.1283   0.1552  0.8266 0.4085 -0.1760  0.4326\n---------------------------------------------------------------------\nOmnibus:              1150.070       Durbin-Watson:          1.981   \nProb(Omnibus):        0.000          Jarque-Bera (JB):       1616.376\nSkew:                 0.900          Prob(JB):               0.000   \nKurtosis:             3.800          Condition No.:          6       \n=====================================================================\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors\nis correctly specified.\n```\n:::\n:::\n\n\nAnd here is the model visualized:\n\n::: {#cell-rate-util-plot .cell execution_count=8}\n``` {.python .cell-code}\nsns.scatterplot(x='credit_util', y='interest_rate', data=loans, alpha=0.5)\nsns.lineplot(x=loans['credit_util'], y=model.predict(X), color='red')\nplt.xlabel('Credit Utilization')\nplt.ylabel('Interest Rate')\nplt.title('Interest Rate vs. Credit Utilization')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-11-modeling-loans-A_files/figure-html/rate-util-plot-output-1.png){#rate-util-plot width=585 height=449}\n:::\n:::\n\n\n-   **Your turn:** Interpret the intercept and the slope.\n\nIntercept: Borrowers with 0 credit utilization are predicted, on average, to get an interest rate of 10.5%.\n\nSlope: For each additional point credit utilization is higher, interest rate is predicted to be higher, on average, by 4.73%.\n\n# Interest rate vs. homeownership\n\nNext we predict interest rates from homeownership, which is a categorical predictor with three levels:\n\n::: {#e70268fe .cell execution_count=9}\n``` {.python .cell-code}\nhomeownership_levels = loans['homeownership'].cat.categories\nprint(homeownership_levels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Rent', 'Mortgage', 'Own'], dtype='object')\n```\n:::\n:::\n\n\n-   **Demo:** Fit the linear regression model to predict interest rate from homeownership and display a summary of the model. Write the estimated model output below.\n\n::: {#rate-home-fit .cell execution_count=10}\n``` {.python .cell-code}\nX = pd.get_dummies(loans['homeownership'], drop_first=True)\nX = X.astype(float)\nX = sm.add_constant(X)\ny = loans['interest_rate']\nmodel = sm.OLS(y, X).fit()\nprint(model.summary2())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  Results: Ordinary least squares\n===================================================================\nModel:              OLS              Adj. R-squared:     0.006     \nDependent Variable: interest_rate    AIC:                60511.8415\nDate:               2024-07-28 15:34 BIC:                60533.4726\nNo. Observations:   10000            Log-Likelihood:     -30253.   \nDf Model:           2                F-statistic:        32.65     \nDf Residuals:       9997             Prob (F-statistic): 7.35e-15  \nR-squared:          0.006            Scale:              24.854    \n---------------------------------------------------------------------\n            Coef.    Std.Err.      t       P>|t|     [0.025    0.975]\n---------------------------------------------------------------------\nconst      12.9250     0.0803   161.0329   0.0000   12.7676   13.0823\nMortgage   -0.8661     0.1079    -8.0304   0.0000   -1.0775   -0.6547\nOwn        -0.6110     0.1575    -3.8788   0.0001   -0.9197   -0.3022\n-------------------------------------------------------------------\nOmnibus:              1045.136      Durbin-Watson:         1.990   \nProb(Omnibus):        0.000         Jarque-Bera (JB):      1408.154\nSkew:                 0.866         Prob(JB):              0.000   \nKurtosis:             3.615         Condition No.:         4       \n===================================================================\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors\nis correctly specified.\n```\n:::\n:::\n\n\n-   **Your turn:** Interpret each coefficient in context of the problem.\n\n    -   Intercept: Loan applicants who rent are predicted to receive an interest rate of 12.9%, on average.\n\n    -   Slopes:\n\n        -   The model predicts that loan applicants who have a mortgage for their home receive 0.866% lower interest rate than those who rent their home, on average.\n\n        -   The model predicts that loan applicants who own their home receive 0.611% lower interest rate than those who rent their home, on average.\n\n# Interest rate vs. credit utilization and homeownership\n\n## Main effects model\n\n-   **Demo:** Fit a model to predict interest rate from credit utilization and homeownership, **without** an interaction effect between the two predictors. Display the summary output and write out the estimated regression equation.\n\n::: {#rate-util-home-fit .cell execution_count=11}\n``` {.python .cell-code}\nX = loans[['credit_util']].join(pd.get_dummies(loans['homeownership'], drop_first=True)).astype(float)\nX = sm.add_constant(X)\ny = loans['interest_rate']\n\ndata = pd.concat([X, y], axis=1)\ndata = data.replace([np.inf, -np.inf], np.nan).dropna()\n\nX = data.drop(columns='interest_rate')\ny = data['interest_rate']\n\nmain_effects_model = sm.OLS(y, X).fit()\nprint(model.summary2())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  Results: Ordinary least squares\n===================================================================\nModel:              OLS              Adj. R-squared:     0.006     \nDependent Variable: interest_rate    AIC:                60511.8415\nDate:               2024-07-28 15:34 BIC:                60533.4726\nNo. Observations:   10000            Log-Likelihood:     -30253.   \nDf Model:           2                F-statistic:        32.65     \nDf Residuals:       9997             Prob (F-statistic): 7.35e-15  \nR-squared:          0.006            Scale:              24.854    \n---------------------------------------------------------------------\n            Coef.    Std.Err.      t       P>|t|     [0.025    0.975]\n---------------------------------------------------------------------\nconst      12.9250     0.0803   161.0329   0.0000   12.7676   13.0823\nMortgage   -0.8661     0.1079    -8.0304   0.0000   -1.0775   -0.6547\nOwn        -0.6110     0.1575    -3.8788   0.0001   -0.9197   -0.3022\n-------------------------------------------------------------------\nOmnibus:              1045.136      Durbin-Watson:         1.990   \nProb(Omnibus):        0.000         Jarque-Bera (JB):      1408.154\nSkew:                 0.866         Prob(JB):              0.000   \nKurtosis:             3.615         Condition No.:         4       \n===================================================================\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors\nis correctly specified.\n```\n:::\n:::\n\n\n$$\n\\widehat{interest~rate} = 9.93 + 5.34 \\times credit~util + 0.696 \\times Mortgage + 0.128 \\times Own\n$$\n\n-   **Demo:** Write the estimated regression equation for loan applications from each of the homeownership groups separately.\n    -   Rent: $\\widehat{interest~rate} = 9.93 + 5.34 \\times credit~util$\n    -   Mortgage: $\\widehat{interest~rate} = 10.626 + 5.34 \\times credit~util$\n    -   Own: $\\widehat{interest~rate} = 10.058 + 5.34 \\times credit~util$\n-   **Question:** How does the model predict the interest rate to vary as credit utilization varies for loan applicants with different homeownership status. Are the rates the same or different?\n\nThe same.\n\n## Interaction effects model\n\n-   **Demo:** Fit a model to predict interest rate from credit utilization and homeownership, **with** an interaction effect between the two predictors. Display the summary output and write out the estimated regression equation.\n\n::: {#rate-util-home-int-fit .cell execution_count=12}\n``` {.python .cell-code}\nX = loans[['credit_util']].join(pd.get_dummies(loans['homeownership'], drop_first=True)).astype(float)\nX['credit_util_Mortgage'] = X['credit_util'] * X['Mortgage']\nX['credit_util_Own'] = X['credit_util'] * X['Own']\nX = sm.add_constant(X)\ny = loans['interest_rate']\n\ndata = pd.concat([X, y], axis=1)\ndata = data.replace([np.inf, -np.inf], np.nan).dropna()\n\nX = data.drop(columns='interest_rate')\ny = data['interest_rate']\n\ninteraction_model = sm.OLS(y, X).fit()\nprint(model.summary2())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  Results: Ordinary least squares\n===================================================================\nModel:              OLS              Adj. R-squared:     0.006     \nDependent Variable: interest_rate    AIC:                60511.8415\nDate:               2024-07-28 15:34 BIC:                60533.4726\nNo. Observations:   10000            Log-Likelihood:     -30253.   \nDf Model:           2                F-statistic:        32.65     \nDf Residuals:       9997             Prob (F-statistic): 7.35e-15  \nR-squared:          0.006            Scale:              24.854    \n---------------------------------------------------------------------\n            Coef.    Std.Err.      t       P>|t|     [0.025    0.975]\n---------------------------------------------------------------------\nconst      12.9250     0.0803   161.0329   0.0000   12.7676   13.0823\nMortgage   -0.8661     0.1079    -8.0304   0.0000   -1.0775   -0.6547\nOwn        -0.6110     0.1575    -3.8788   0.0001   -0.9197   -0.3022\n-------------------------------------------------------------------\nOmnibus:              1045.136      Durbin-Watson:         1.990   \nProb(Omnibus):        0.000         Jarque-Bera (JB):      1408.154\nSkew:                 0.866         Prob(JB):              0.000   \nKurtosis:             3.615         Condition No.:         4       \n===================================================================\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors\nis correctly specified.\n```\n:::\n:::\n\n\n$$\n\\widehat{interest~rate} = 9.44 + 6.20 \\times credit~util + 1.39 \\times Mortgage + 0.697 \\times Own - 1.64 \\times credit_util:Mortgage - 1.06 \\times credit_util:Own\n$$\n\n-   **Demo:** Write the estimated regression equation for loan applications from each of the homeownership groups separately.\n    -   Rent: $\\widehat{interest~rate} = 9.44 + 6.20 \\times credit~util$\n    -   Mortgage: $\\widehat{interest~rate} = 10.83 + 4.56 \\times credit~util$\n    -   Own: $\\widehat{interest~rate} = 10.137 + 5.14 \\times credit~util$\n-   **Question:** How does the model predict the interest rate to vary as credit utilization varies for loan applicants with different homeownership status. Are the rates the same or different?\n\nDifferent.\n\n## Choosing a model\n\nRule of thumb: **Occam's Razor** - Don't overcomplicate the situation!\nWe prefer the *simplest* best model.\n\n::: {#glance .cell execution_count=13}\n``` {.python .cell-code}\nprint(main_effects_model.summary2())\nprint(interaction_model.summary2())\n\nprint(\"Main Effects Model Adjusted R-squared:\", main_effects_model.rsquared_adj)\nprint(\"Interaction Effects Model Adjusted R-squared:\", interaction_model.rsquared_adj)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  Results: Ordinary least squares\n===================================================================\nModel:              OLS              Adj. R-squared:     0.068     \nDependent Variable: interest_rate    AIC:                59859.3779\nDate:               2024-07-28 15:34 BIC:                59888.2185\nNo. Observations:   9998             Log-Likelihood:     -29926.   \nDf Model:           3                F-statistic:        243.7     \nDf Residuals:       9994             Prob (F-statistic): 1.25e-152 \nR-squared:          0.068            Scale:              23.309    \n--------------------------------------------------------------------\n                 Coef.   Std.Err.     t     P>|t|    [0.025   0.975]\n--------------------------------------------------------------------\nconst            9.9250    0.1401  70.8498  0.0000   9.6504  10.1996\ncredit_util      5.3356    0.2074  25.7266  0.0000   4.9291   5.7421\nMortgage         0.6956    0.1208   5.7590  0.0000   0.4588   0.9323\nOwn              0.1283    0.1552   0.8266  0.4085  -0.1760   0.4326\n-------------------------------------------------------------------\nOmnibus:              1150.070      Durbin-Watson:         1.981   \nProb(Omnibus):        0.000         Jarque-Bera (JB):      1616.376\nSkew:                 0.900         Prob(JB):              0.000   \nKurtosis:             3.800         Condition No.:         6       \n===================================================================\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors\nis correctly specified.\n                  Results: Ordinary least squares\n====================================================================\nModel:               OLS              Adj. R-squared:     0.069     \nDependent Variable:  interest_rate    AIC:                59850.4002\nDate:                2024-07-28 15:34 BIC:                59893.6611\nNo. Observations:    9998             Log-Likelihood:     -29919.   \nDf Model:            5                F-statistic:        149.0     \nDf Residuals:        9992             Prob (F-statistic): 4.79e-153 \nR-squared:           0.069            Scale:              23.284    \n--------------------------------------------------------------------\n                      Coef.  Std.Err.    t    P>|t|   [0.025  0.975]\n--------------------------------------------------------------------\nconst                 9.4369   0.1986 47.5256 0.0000  9.0477  9.8261\ncredit_util           6.2043   0.3252 19.0774 0.0000  5.5668  6.8418\nMortgage              1.3903   0.2276  6.1092 0.0000  0.9442  1.8364\nOwn                   0.6972   0.3163  2.2040 0.0275  0.0771  1.3173\ncredit_util_Mortgage -1.6354   0.4572 -3.5771 0.0003 -2.5315 -0.7392\ncredit_util_Own      -1.0594   0.5896 -1.7967 0.0724 -2.2152  0.0964\n--------------------------------------------------------------------\nOmnibus:             1157.460       Durbin-Watson:          1.984   \nProb(Omnibus):       0.000          Jarque-Bera (JB):       1630.777\nSkew:                0.903          Prob(JB):               0.000   \nKurtosis:            3.808          Condition No.:          19      \n====================================================================\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors\nis correctly specified.\nMain Effects Model Adjusted R-squared: 0.06788934875258668\nInteraction Effects Model Adjusted R-squared: 0.06891213837091503\n```\n:::\n:::\n\n\n-   **Review:** What is R-squared? What is adjusted R-squared?\n\nR-squared is the percent variability in the response that is explained by our model.\n(Can use when models have same number of variables for model selection)\n\nAdjusted R-squared is similar, but has a penalty for the number of variables in the model.\n(Should use for model selection when models have different numbers of variables).\n\n-   **Question:** Based on the adjusted $R^2$s of these two models, which one do we prefer?\n\nThe interaction effects model, though just barely.\n\n# Another model to consider\n\n-   **Your turn:** Let's add one more model to the variable -- issue month. Should we add this variable to the interaction effects model from earlier?\n\n::: {#new-fit .cell execution_count=14}\n``` {.python .cell-code}\nX = loans[['credit_util']].join(pd.get_dummies(loans['homeownership'], drop_first=True)).join(pd.get_dummies(loans['issue_month'], drop_first=True)).astype(float)\nX['credit_util_Mortgage'] = X['credit_util'] * X['Mortgage']\nX['credit_util_Own'] = X['credit_util'] * X['Own']\nX = sm.add_constant(X)\ny = loans['interest_rate']\n\ndata = pd.concat([X, y], axis=1)\ndata = data.replace([np.inf, -np.inf], np.nan).dropna()\n\nX = data.drop(columns='interest_rate')\ny = data['interest_rate']\n\nnew_model = sm.OLS(y, X).fit()\nprint(new_model.summary2())\n\nprint(\"New Model Adjusted R-squared:\", new_model.rsquared_adj)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  Results: Ordinary least squares\n====================================================================\nModel:               OLS              Adj. R-squared:     0.069     \nDependent Variable:  interest_rate    AIC:                59853.9136\nDate:                2024-07-28 15:34 BIC:                59911.5948\nNo. Observations:    9998             Log-Likelihood:     -29919.   \nDf Model:            7                F-statistic:        106.5     \nDf Residuals:        9990             Prob (F-statistic): 5.62e-151 \nR-squared:           0.069            Scale:              23.287    \n--------------------------------------------------------------------\n                      Coef.  Std.Err.    t    P>|t|   [0.025  0.975]\n--------------------------------------------------------------------\nconst                 9.4870   0.2115 44.8607 0.0000  9.0725  9.9016\ncredit_util           6.2043   0.3253 19.0748 0.0000  5.5667  6.8419\nMortgage              1.3921   0.2276  6.1154 0.0000  0.9459  1.8384\nOwn                   0.7000   0.3164  2.2124 0.0270  0.0798  1.3202\nJan-2018             -0.0799   0.1211 -0.6600 0.5093 -0.3173  0.1574\nMar-2018             -0.0651   0.1194 -0.5456 0.5854 -0.2991  0.1688\ncredit_util_Mortgage -1.6384   0.4573 -3.5827 0.0003 -2.5348 -0.7420\ncredit_util_Own      -1.0646   0.5897 -1.8052 0.0711 -2.2205  0.0914\n--------------------------------------------------------------------\nOmnibus:             1157.710       Durbin-Watson:          1.984   \nProb(Omnibus):       0.000          Jarque-Bera (JB):       1631.442\nSkew:                0.903          Prob(JB):               0.000   \nKurtosis:            3.809          Condition No.:          21      \n====================================================================\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors\nis correctly specified.\nNew Model Adjusted R-squared: 0.06877105698580799\n```\n:::\n:::\n\n\nNo, the adjusted R-squared goes down.\n\n",
    "supporting": [
      "ae-11-modeling-loans-A_files"
    ],
    "filters": [],
    "includes": {}
  }
}