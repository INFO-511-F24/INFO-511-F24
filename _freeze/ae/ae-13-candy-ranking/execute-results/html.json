{
  "hash": "102923216b86e7a7ef840f85805cae2b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'AE 13: Ultimate candy ranking'\ncategories:\n  - Application exercise\n  - Answers\neditor: visual\neditor_options:\n  chunk_output_type: console\nexecute:\n  warning: false\n  error: false\n---\n\nIn this application exercise, we will:\n\n-   Use backwards elimination to do model selection.\n    Make sure to show each step of decision (though you don't have to interpret the models at each stage).\n\n-   Yes, this is tedious.\n    And yes, there are ways of automating it.\n    But for now, go through the process \"manually\", to get a good sense of how the model selection algorithm works.\n\n-   Provide interpretations for the slopes for the final model you arrive at and create at least one visualization that supports your narrative.\n\n::: {#281abf51 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n# Examine the data\n\n-   We will use the `candy_rankings.csv` dataset for this analysis.\n\n::: {#0dd90c9b .cell execution_count=2}\n``` {.python .cell-code}\ncandy_rankings = pd.read_csv('data/candy_rankings.csv')\ncandy_rankings.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 85 entries, 0 to 84\nData columns (total 13 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   competitorname    85 non-null     object \n 1   chocolate         85 non-null     bool   \n 2   fruity            85 non-null     bool   \n 3   caramel           85 non-null     bool   \n 4   peanutyalmondy    85 non-null     bool   \n 5   nougat            85 non-null     bool   \n 6   crispedricewafer  85 non-null     bool   \n 7   hard              85 non-null     bool   \n 8   bar               85 non-null     bool   \n 9   pluribus          85 non-null     bool   \n 10  sugarpercent      85 non-null     float64\n 11  pricepercent      85 non-null     float64\n 12  winpercent        85 non-null     float64\ndtypes: bool(9), float64(3), object(1)\nmemory usage: 3.5+ KB\n```\n:::\n:::\n\n\n# Exercises\n\nUse the variables:\n\n`chocolate`, `fruity`, `nougat`, `pricepercent`, `sugarpercent`, `sugarpercent*chocolate`, `pricepercent*fruity`\n\n## Exercise 1\n\nCreate the full model and show the $R^2_{adj}$:\n\n::: {#c6d1a96f .cell execution_count=3}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\nIs the model a good fit of the data?\n\n*Add response here.*\n\n## Exercise 2\n\nProduce all possible models removing 1 term at a time from the full model.\nDescribe what is being removed above each code cell.\n\n::: {#0ac5e52e .cell execution_count=4}\n``` {.python .cell-code}\n# Blank dictionary to store new models\nmodels = {}\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#73a889e3 .cell execution_count=5}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#efb33436 .cell execution_count=6}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#5f172515 .cell execution_count=7}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#a7219f8c .cell execution_count=8}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#1d3d6dda .cell execution_count=9}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#575565ec .cell execution_count=10}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 3\n\nCompare all models using the framework (also use the same below):\n\n::: {#7693bf8a .cell execution_count=11}\n``` {.python .cell-code}\nbest_model_step1 = max(models, key=models.get)\nprint(f'Best model in Exercise 2: {best_model_step1} with Adjusted R-squared: {models[best_model_step1]}')\n```\n:::\n\n\n-   Which model is best:\n\n*Add response here.*\n\n## Exercise 4\n\nCreate all possible models removing 1 term at a time from the model selected in the previous exercise.\nAgain, describe what is being removed above each code cell.\n\n::: {#0a64481f .cell execution_count=12}\n``` {.python .cell-code}\n# Blank dictionary to store new models\nmodels = {}\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#0124291b .cell execution_count=13}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#e02472f3 .cell execution_count=14}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#29ba7c85 .cell execution_count=15}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#6b9a6fef .cell execution_count=16}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#3bd278da .cell execution_count=17}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 5\n\nCompare all models using the framework `best_model_step2 = max(models, key=models.get)`:\n\n::: {#89894983 .cell execution_count=18}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   Which model is best:\n\n*Add response here.*\n\n## Exercise 6\n\nCreate all possible models removing 1 term at a time from the model selected in the previous step.\nAgain, describe what is being removed above each code cell.\n\n::: {#4a54343d .cell execution_count=19}\n``` {.python .cell-code}\n# Blank dictionary to store new models\nmodels = {}\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#78b9d484 .cell execution_count=20}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#c03f247f .cell execution_count=21}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#0da97fe9 .cell execution_count=22}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#59da21f6 .cell execution_count=23}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   *Add what is being removed here.*\n\n::: {#a9ff302b .cell execution_count=24}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n## Exercise 7\n\nCompare all models using the framework `best_model_step3 = max(models, key=models.get)`:\n\n::: {#de11af7b .cell execution_count=25}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   Which model is best:\n\n*Add response here*\n\n-   Show the final model summary and coefficients:\n\n::: {#1fecde81 .cell execution_count=26}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n",
    "supporting": [
      "ae-13-candy-ranking_files"
    ],
    "filters": [],
    "includes": {}
  }
}