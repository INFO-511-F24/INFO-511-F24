{
  "hash": "84da38ec83fac19a80a499e7eaaf90ce",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"AE 11: Modelling loan interest rates\"\ncategories: \n  - Application exercise\n---\n\nIn this application exercise we will be studying loan interest rates.\nThe dataset is one you've come across before in your reading -- the dataset about loans from the peer-to-peer lender, Lending Club, from the **openintro** R package.\nWe will use **pandas** and **scikit-learn** for data exploration and modeling, respectively.\n\n::: {#load-packages .cell message='false' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nimport statsmodels.api as sm\n\nloans = pd.read_csv('data/loans_full_schema.csv')\n```\n:::\n\n\nBefore we use the dataset, we'll make a few transformations to it.\n\n-   **Your turn:** Review the code below and write a summary of the data transformation pipeline.\n\n*Add response here.*\n\n::: {#data-prep .cell execution_count=2}\n``` {.python .cell-code}\nloans['credit_util'] = loans['total_credit_utilized'] / loans['total_credit_limit']\nloans['bankruptcy'] = loans['public_record_bankrupt'].apply(lambda x: 0 if x == 0 else 1).astype('category')\nloans['verified_income'] = loans['verified_income'].astype('category')\nloans['homeownership'] = loans['homeownership'].str.title().astype('category')\nloans['homeownership'] = pd.Categorical(loans['homeownership'], categories=[\"Rent\", \"Mortgage\", \"Own\"], ordered=True)\nloans = loans.rename(columns={'inquiries_last_12m': 'credit_checks'})\nloans = loans[['interest_rate', 'loan_amount', 'verified_income', 'debt_to_income', 'credit_util', 'bankruptcy', 'term', 'credit_checks', 'issue_month', 'homeownership']]\n```\n:::\n\n\nHere is a glimpse at the data:\n\n::: {#glimpse-loans .cell execution_count=3}\n``` {.python .cell-code}\nprint(loans.info())\nprint(loans.describe())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 10 columns):\n #   Column           Non-Null Count  Dtype   \n---  ------           --------------  -----   \n 0   interest_rate    10000 non-null  float64 \n 1   loan_amount      10000 non-null  int64   \n 2   verified_income  10000 non-null  category\n 3   debt_to_income   9976 non-null   float64 \n 4   credit_util      9998 non-null   float64 \n 5   bankruptcy       10000 non-null  category\n 6   term             10000 non-null  int64   \n 7   credit_checks    10000 non-null  int64   \n 8   issue_month      10000 non-null  object  \n 9   homeownership    10000 non-null  category\ndtypes: category(3), float64(3), int64(3), object(1)\nmemory usage: 576.7+ KB\nNone\n       interest_rate   loan_amount  debt_to_income  credit_util          term  \\\ncount   10000.000000  10000.000000     9976.000000  9998.000000  10000.000000   \nmean       12.427524  16361.922500       19.308192     0.403158     43.272000   \nstd         5.001105  10301.956759       15.004851     0.269313     11.029877   \nmin         5.310000   1000.000000        0.000000     0.000000     36.000000   \n25%         9.430000   8000.000000       11.057500     0.169029     36.000000   \n50%        11.980000  14500.000000       17.570000     0.360192     36.000000   \n75%        15.050000  24000.000000       25.002500     0.607317     60.000000   \nmax        30.940000  40000.000000      469.090000     1.835280     60.000000   \n\n       credit_checks  \ncount    10000.00000  \nmean         1.95820  \nstd          2.38013  \nmin          0.00000  \n25%          0.00000  \n50%          1.00000  \n75%          3.00000  \nmax         29.00000  \n```\n:::\n:::\n\n\n# Get to know the data\n\n-   **Your turn:** What is a typical interest rate in this dataset? What are some attributes of a typical loan and a typical borrower. Give yourself no more than 5 minutes for this exploration and share 1-2 findings.\n\n::: {#explore-loans .cell execution_count=4}\n``` {.python .cell-code}\n# add code to explore loans here\n```\n:::\n\n\n::: {#explore-borrowers .cell execution_count=5}\n``` {.python .cell-code}\n# add code to explore borrowers here\n```\n:::\n\n\n# Interest rate vs. credit utilization ratio\n\nPython does not encode categories or handle missing values for you.\nLinear regression models are incapable of handling either, so we will need to use one-hot encoding to encode categories and drop missing values.\n\n**Hint**: Python also does not convert the one-hot encoded values to numerics...\nso we must do this as well.\n\n::: {#3c2a99a8 .cell execution_count=6}\n``` {.python .cell-code}\nX = loans[['credit_util', 'homeownership']]\n\nX = pd.get_dummies(X, drop_first=True)\n\nX = X.dropna()\nX = X.replace([np.inf, -np.inf], np.nan).dropna()\nX = X.astype(float)\n\ny = loans.loc[X.index, 'interest_rate']\ny = y.dropna()\n```\n:::\n\n\nThe regression model for interest rate vs. credit utilization is as follows.\n\n::: {#rate-util-fit .cell execution_count=7}\n``` {.python .cell-code}\nX = sm.add_constant(X)\nmodel = sm.OLS(y, X).fit()\nprint(model.summary2())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Results: Ordinary least squares\n=====================================================================\nModel:                OLS              Adj. R-squared:     0.068     \nDependent Variable:   interest_rate    AIC:                59859.3779\nDate:                 2024-07-28 15:34 BIC:                59888.2185\nNo. Observations:     9998             Log-Likelihood:     -29926.   \nDf Model:             3                F-statistic:        243.7     \nDf Residuals:         9994             Prob (F-statistic): 1.25e-152 \nR-squared:            0.068            Scale:              23.309    \n---------------------------------------------------------------------\n                       Coef.  Std.Err.    t    P>|t|   [0.025  0.975]\n---------------------------------------------------------------------\nconst                  9.9250   0.1401 70.8498 0.0000  9.6504 10.1996\ncredit_util            5.3356   0.2074 25.7266 0.0000  4.9291  5.7421\nhomeownership_Mortgage 0.6956   0.1208  5.7590 0.0000  0.4588  0.9323\nhomeownership_Own      0.1283   0.1552  0.8266 0.4085 -0.1760  0.4326\n---------------------------------------------------------------------\nOmnibus:              1150.070       Durbin-Watson:          1.981   \nProb(Omnibus):        0.000          Jarque-Bera (JB):       1616.376\nSkew:                 0.900          Prob(JB):               0.000   \nKurtosis:             3.800          Condition No.:          6       \n=====================================================================\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors\nis correctly specified.\n```\n:::\n:::\n\n\nAnd here is the model visualized:\n\n::: {#cell-rate-util-plot .cell execution_count=8}\n``` {.python .cell-code}\nsns.scatterplot(x='credit_util', y='interest_rate', data=loans, alpha=0.5)\nsns.lineplot(x=loans['credit_util'], y=model.predict(X), color='red')\nplt.xlabel('Credit Utilization')\nplt.ylabel('Interest Rate')\nplt.title('Interest Rate vs. Credit Utilization')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](ae-11-modeling-loans_files/figure-html/rate-util-plot-output-1.png){#rate-util-plot width=585 height=449}\n:::\n:::\n\n\n-   **Your turn:** Interpret the intercept and the slope.\n\nIntercept: Borrowers with 0 credit utilization are predicted, on average, to get an interest rate of 10.5%.\n\nSlope: For each additional point credit utilization is higher, interest rate is predicted to be higher, on average, by 4.73%.\n\n# Interest rate vs. homeownership\n\nNext we predict interest rates from homeownership, which is a categorical predictor with three levels:\n\n::: {#72c4c5d1 .cell execution_count=9}\n``` {.python .cell-code}\nhomeownership_levels = loans['homeownership'].cat.categories\nprint(homeownership_levels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Rent', 'Mortgage', 'Own'], dtype='object')\n```\n:::\n:::\n\n\n-   **Demo:** Fit the linear regression model to predict interest rate from homeownership and display a summary of the model. Write the estimated model output below.\n\n::: {#rate-home-fit .cell execution_count=10}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   **Your turn:** Interpret each coefficient in context of the problem.\n\n*Add response here.*\n\n# Interest rate vs. credit utilization and homeownership\n\n## Main effects model\n\n-   **Demo:** Fit a model to predict interest rate from credit utilization and homeownership, **without** an interaction effect between the two predictors. Display the summary output and write out the estimated regression equation.\n\n::: {#rate-util-home-fit .cell execution_count=11}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n*Add response here.*\n\n-   **Demo:** Write the estimated regression equation for loan applications from each of the homeownership groups separately.\n    -   Rent: *Add response here.*\n    -   Mortgage: *Add response here.*\n    -   Own: *Add response here.*\n-   **Question:** How does the model predict the interest rate to vary as credit utilization varies for loan applicants with different homeownership status. Are the rates the same or different?\n\n*Add response here.*\n\n## Interaction effects model\n\n-   **Demo:** Fit a model to predict interest rate from credit utilization and homeownership, **with** an interaction effect between the two predictors. Display the summary output and write out the estimated regression equation.\n\n::: {#rate-util-home-int-fit .cell execution_count=12}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n*Add response here.*\n\n-   **Demo:** Write the estimated regression equation for loan applications from each of the homeownership groups separately.\n    -   Rent: *Add response here.*\n    -   Mortgage: *Add response here.*\n    -   Own: *Add response here.*\n-   **Question:** How does the model predict the interest rate to vary as credit utilization varies for loan applicants with different homeownership status. Are the rates the same or different?\n\n*Add response here.*\n\n## Choosing a model\n\nRule of thumb: **Occam's Razor** - Don't overcomplicate the situation!\nWe prefer the *simplest* best model.\n\n::: {#glance .cell execution_count=13}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n-   **Review:** What is R-squared? What is adjusted R-squared?\n\n*Add response here.*\n\n-   **Question:** Based on the adjusted $R^2$s of these two models, which one do we prefer?\n\n*Add response here.*\n\n# Another model to consider\n\n-   **Your turn:** Let's add one more model to the variable -- issue month. Should we add this variable to the interaction effects model from earlier?\n\n::: {#new-fit .cell execution_count=14}\n``` {.python .cell-code}\n# add code here\n```\n:::\n\n\n*Add response here.*\n\n",
    "supporting": [
      "ae-11-modeling-loans_files"
    ],
    "filters": [],
    "includes": {}
  }
}