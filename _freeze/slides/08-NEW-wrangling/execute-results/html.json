{
  "hash": "4e9d0c0c84aa7d492acf8f16589fde2f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Data wrangling I\nsubtitle: Lecture 5\nformat: revealjs\neditor_options:\n  chunk_output_type: console\nexecute:\n  warning: false\n  message: false\n---\n\n## Asking good questions {.smaller}\n\n-   Post content questions on Slack\n-   If you have a coding question always provide the code, and if relevant, the error\n    -   If this feels impossible, don't fret it, it's ok to ask questions without the code. It's just more efficient with it!\n-   Title your thread in a way that can help others (e.g., \"Q7\" vs. \"error with `.transform()` function in Lab 1 - Q7\")\n-   Check for previous questions\n\n# Data frames and `tibble`s\n\n## NYC Flights\n\n-   To demonstrate data wrangling we will use `flights`, a tibble in the **nycflights13** R package.\n\n-   The data set includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.\n\n\n\n```{r}\n#| label: load-packages\n#| message: false\n\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n\n\n\n## `flights` -- dimensions\n\n-   Number of rows:\n\n\n\n```{r}\nnrow(flights)\n```\n\n\n\n. . .\n\n-   Number of columns:\n\n\n\n```{r}\nncol(flights)\n```\n\n\n\n## `flights` -- first look {.smaller}\n\n::: panel-tabset\n## `glimpse()`\n\n\n\n```{r}\n#| label: glimpse-data\n\nglimpse(flights)\n```\n\n\n\n## `names()`\n\n\n\n```{r}\n#| label: column-names\n\nnames(flights)\n```\n\n\n\n## `head()`\n\n\n\n```{r}\n#| label: explore-data\n\nhead(flights)\n```\n\n\n:::\n\n## `tibble` vs. data frame\n\n::: incremental\n-   **tibble**: an opinionated version of the `R` data frame\n-   All tibbles are data frames, but not all data frames are tibbles!\n-   Two main differences between a tibble and a data frame:\n    -   Printing\n    -   Stricter subsetting\n:::\n\n## Printing {.smaller}\n\n::: panel-tabset\n## `tibble`\n\nDisplay first 10 rows and all of the columns that fit on the screen will display, along with the type of each column.\n\n\n\n```{r}\n#| label: tibble-print\n\nflights\n```\n\n\n\n## `data.frame`\n\n(Attempt to) display all of the data, or die (crash) tryin (if the dataset is too large)!\n\n\n\n```{r}\n#| label: data-frame-print\n\ncars\n```\n\n\n:::\n\n## Stricter subsetting\n\n::: panel-tabset\n## `tibble`\n\nWarning + `NULL` if variable not found.\n\n\n\n```{r}\n#| label: tibble-subset\n\nflights$apple\n```\n\n\n\n## `data.frame`\n\nOnly `NULL` if variable not found.\n\n\n\n```{r}\n#| label: data-frame-subset\n\ncars$apple\n```\n\n\n:::\n\n# Data wrangling with `dplyr`\n\n## dplyr\n\nPrimary package in the tidyverse for data wrangling\n\n::: columns\n::: {.column width=\"50%\"}\n[dplyr.tidyverse.org](https://dplyr.tidyverse.org)\n\n\n\n```{=html}\n<iframe width=600 height=375 src=\"https://dplyr.tidyverse.org/\" title=\"dplyr home page\"></iframe>\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n[Cheat sheet](https://rstudio.github.io/cheatsheets/html/data-transformation.html)\n\n[![](images/dplyr-cheat-sheet.png)](https://rstudio.github.io/cheatsheets/html/data-transformation.html)\n:::\n:::\n\n## Row operations\n\n-   `slice()`: chooses rows based on location\n-   `filter()`:chooses rows based on column values\n-   `arrange()`: changes the order of the rows\n-   `sample_n()`: take a random subset of the rows\n\n## `slice()` {.smaller}\n\nDisplay the first five rows of `flights`:\n\n\n\n```{r}\n#| label: slice\n#| code-line-numbers: \"|1|2\"\n\nflights |>      # <1>   \n  slice(1:5)    # <2>\n```\n\n\n\n1.  Take the `flights` data frame, **and then**,\n2.  Slice its first five rows\n\n## `filter()` {.smaller}\n\nFilter for flights to RDU in `flights`:\n\n\n\n```{r}\n#| label: filter\n#| code-line-numbers: \"|1|2\"\n\nflights |>                 # <1>   \n  filter(dest == \"RDU\")    # <2>\n```\n\n\n\n1.  Take the `flights` data frame, **and then**,\n2.  Filter for rows where `dest` *is equal to* `RDU`\n\n## The pipe\n\n::: incremental\n-   The **pipe**, `|>`, is an operator (a tool) for passing information from one process to another.\n\n-   Use `|>` mainly in data pipelines to pass the output of the previous line of code as the first input of the next line of code.\n\n-   When reading code \"in English\", say \"and then\" whenever you see a pipe.\n:::\n\n## Delayed flights to RDU\n\n::: demo\nWhich airline is the most delayed, on average, arriving in RDU from a New York City airport?\n:::\n\n. . .\n\n**Goal:**\n\n\n\n```{r}\n#| echo: false\n#| ref.label: pipe-5\n```\n\n\n\n## The pipe, in action {.smaller}\n\n\n\n```{r}\n#| label: pipe-1\n\nflights # <1>\n```\n\n\n\n1.  Take the flights data frame\n\n## The pipe, in action {.smaller}\n\n\n\n```{r}\n#| label: pipe-2\n\nflights |>               # <1>\n  filter(dest == \"RDU\")  # <2>\n```\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU\n\n## The pipe, in action {.smaller}\n\n\n\n```{r}\n#| label: pipe-3\n\nflights |>                  # <1>\n  filter(dest == \"RDU\") |>  # <2>\n  group_by(carrier)         # <3>\n```\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU,\n3.  **and then** group by carrier\n\n## The pipe, in action {.smaller}\n\n\n\n```{r}\n#| label: pipe-4\n\nflights |>                  # <1>\n  filter(dest == \"RDU\") |>  # <2>\n  group_by(carrier) |>      # <3>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) # <4>\n```\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU,\n3.  **and then** group by carrier,\n4.  **and then** calculate the mean arrival delay for each carrier\n\n## The pipe, in action {.smaller}\n\n\n\n```{r}\n#| label: pipe-5\n\nflights |>                  # <1>\n  filter(dest == \"RDU\") |>  # <2>\n  group_by(carrier) |>      # <3>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) |> # <4>\n  arrange(desc(mean_arr_delay)) # <5>\n```\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU,\n3.  **and then** group by carrier,\n4.  **and then** calculate the mean arrival delay for each carrier,\n5.  **and then** arrange in descending order of mean arrival delay.\n\n## Column operations\n\n-   `select()`: changes whether or not a column is included.\n-   `rename()`: changes the name of columns.\n-   `mutate()`: changes the values of columns and creates new columns.\n\n## Groups of rows\n\n-   `summarize()`: collapses a group into a single row.\n-   `count()`: count unique values of one or more variables.\n-   `group_by()`: perform calculations separately for each value of a variable\n\n# Application exercise\n\n## `ae-04-flights-wrangling`\n\n::: appex\n-   Go to the project navigator in RStudio (top right corner of your RStudio window) and open the project called `ae`.\n\n-   If there are any uncommitted files, commit them, and then click **Pull**.\n\n-   Open the file called `ae-04-flights-wrangling.qmd` and render it.\n:::\n\n## Recap: pipe {.smaller}\n\n-   The pipe operator passes what comes before it into the function that comes after it as the first argument in that function.\n\n\n\n```{r}\nsum(1, 2)\n1 |> \n  sum(2)\n```\n\n\n\n-   Always use a line break after the pipe, and indent the next line of code.\n    -   Just like always use a line break between layers of ggplots, after `+`, and indent the next line.\n\n## Recap: logical operators {.smaller}\n\n| operator | definition                   |\n|:---------|:-----------------------------|\n| `<`      | is less than?                |\n| `<=`     | is less than or equal to?    |\n| `>`      | is greater than?             |\n| `>=`     | is greater than or equal to? |\n| `==`     | is exactly equal to?         |\n| `!=`     | is not equal to?             |\n\n## Recap: logical operators {.smaller}\n\n| operator      | definition                                               |\n|:--------------|:---------------------------------------------------------|\n| `x & y`       | is x AND y?                                              |\n| `x \\| y`      | is x OR y?                                               |\n| `is.na(x)`    | is x NA?                                                 |\n| `!is.na(x)`   | is x not NA?                                             |\n| `x %in% y`    | is x in y?                                               |\n| `!(x %in% y)` | is x not in y?                                           |\n| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |\n\n",
    "supporting": [
      "08-NEW-wrangling_files"
    ],
    "filters": [],
    "includes": {}
  }
}